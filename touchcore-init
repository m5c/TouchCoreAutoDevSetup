#!/bin/bash

# Touch/Ram/Core setup script.
# @author max.schiedermeier@mcgill.ca
#
# steps (installations are skiped if required software already found on system)
#
# print disclaimer
# OS check
# brew installation
# jdk-11 installation / jdk-8  installation (v 1.8.232)
# eclipse installation
# code checkout
# eclipse plugin installation
# eclipse checkstyle installation
# eclipse workspace creation and default setup
# eclipse settings configuration (compiler version / JRE)

# Software Version variables

# Cask ruby file for homebrew / (java11 eclipse modeling 2019-09 requires Java 11)
# NOTE: always use raw link INCLUDING commit-hash, to ensure a stable brew target: (11.0.9+11)
# Eclipse 2020-09 is not compatible to 11.0.6  -> 11.0.5 os he most recent compatible.
# DOWNLOAD cask form github raw (use specific commit to target specific version.) e.g. wget https://raw.githubusercontent.com/AdoptOpenJDK/homebrew-openjdk/582dff9b099894d042a7eb1e1418ed97ae59718e/Casks/adoptopenjdk11.rb
JAVARUBY11=adoptopenjdk11.rb
JAVARUBY8=adoptopenjdk8.rb
# Cask ruby file for homebrew
ECLIPSEVERSION=2020-09
# Exact target id of eclipe build, as stored in (cat /Applications/Eclipse\ Modeling.app/Contents/Info.plist | grep -A2 CFBundleVersion | grep string | cut -c 13-33)
ECLIPSE_TARGET_ID=4.17.0.I20200902-1800
# Eclipse plugin version numbers
ACCELEOVERSION=3.7.10.202002210922
# OCL requires splitup, because the files created in the installation do not respect the full verison convention. So to detect preinstalled versions, we need two strings. => OCL Examples and Editors SDK
OCLVERSIONPREFIX="6.12.0."
OCLVERSION=v20200608-1555
# Alike OCL, XTEXT files do not strictly follow the version convention. We need to strings to lookup existing installations => Xtext Complete SDK
XTEXTVERSION=2.23.0.v20200831
XTEXTVERSIONSUFFIX="-0926"
# CDT => search for "c/c++ development tools" (non sdk)
CDTVERSIONPREFIX="10.0.0."
CDTVERSION=202009071455
# EGIT
# mylin is dependency of egit. search for "team" in main repo
MYLYNVERSION="3.25.2.v20200828-1617"
EGITREPO="http://download.eclipse.org/egit/updates"
EGITVERSION="5.9.0.202009080501-r"
BASEPATH=$(pwd)
# Epsilon plugin -> Etea repo: "http://download.eclipse.org/epsilon/updates/2.2/"
# org.eclipse.epsilon.core.feature.feature.group - 1.1.0.202009032353
# org.eclipse.epsilon.emf.feature.feature.group - 1.1.0.202009032353
# implictly requires: org.apache.commons.math3 0.0.0 (osgi bundle) => Is from "orbit" repo. Repo URL in repo selector. Plugin verison if in "installed plugins"
ORBITREPO="http://download.eclipse.org/tools/orbit/downloads/drops/R20200831200620/repository"
MATH3VERSION="3.6.1.v20200817-1830"
EPSILONREPO="http://download.eclipse.org/epsilon/updates/2.2/" 
EPSILONVERSIONPREFIX="2.2.0."
EPSILONVERSION=202009032353


function disclaimer
{
	echo "Welcome to the TouchCore setup script."
	echo "Running this script will alter your system. MAKE A BACKUP NOW!"
	echo "To only display changes that would be made, use the \"-p\" parameter."
        echo "You may have to enter your password, to authorize system-wide configurations."
	echo "--------------------------------------------------------------------"
	echo "I have a backup and want my system to be modified [y/N]"
	read CORRECT
}

function maccheck
{
	# check if the kernel info variable contains the word "Darwin"
	MACKERNEL=$(uname -a | grep Darwin)
	if [ -z "$MACKERNEL" ]; then
		echo "This script only works for MacOS."
		exit -1
	fi
}


function admincheck
{
	if ! groups $username | grep -q -w admin;
	then
	    echo "$(whoami) has no admin priviledges.";
	    exit -1;
	fi
}

# manipulation of installed apps requires spctl to be disabled. This is required to manipulate default settings in the eclipse application, after it has been installed.
function spctlcheck
{
   INTEGRITYCHECKS=$(spctl --status)
   if [ "$INTEGRITYCHECKS" = "assessments enabled" ]; then 
	echo " *** WARNING: Your system is currenlty integrity protected, but eclipse auto-configuration modifies the app-signature. You may be asked for your password, to accept the modification. ***"
	sudo spctl --master-disable
  fi
}

function brewinstall
{
	BREWPATH=$(command -v brew)
	if [ -z "$BREWPATH" ];then
		echo " * Installing brew"
		if [ -z "$PRETEND" ] ; then
			/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
		fi
	else
		echo " * Skipping installation of brew"
	fi
}

function wgetinstall
{
	WGETPATH=$(command -v wget)
	if [ -z "$WGETPATH" ];then
		echo " * Installing wget"
		if [ -z "$PRETEND" ] ; then
			brew install wget
		fi
	else
		echo " * Skipping installation of wget"
	fi
}

function javainstall11
{
	# check if required version of java 11 ispresent	
	if [ ! -d /Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/ ]; then
		echo " * Installing Java 11.0.5"
		if [ -z "$PRETEND" ] ; then
			cd $BASEPATH
			brew install --cask $JAVARUBY11
			cd -
		fi
	else
		# check if the preinstalled java version is the right one
		INSTALLED_VERSION=$(cat /Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Info.plist | grep "AdoptOpenJDK 11" | head -n 1 | cut -c 23-28)
		if [ ! "$INSTALLED_VERSION" = "11.0.5" ]; then
			echo " * Replacing existing java 11 installation with compatible version 11.0.5"
			if [ -z "$PRETEND" ] ; then
			    brew uninstall --cask adoptopenjdk11
			    brew install --cask $JAVARUBY11
			fi
		else
			echo " * Skipping installation/update of Java 11.0.5"
		fi
	fi
}

function javainstall8
{
	# check if required version of java 11 ispresent	
	if [ ! -d /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/ ]; then
		echo " * Installing Java 1.8.0_232-b09"
		if [ -z "$PRETEND" ] ; then
			cd $BASEPATH
			brew install --cask $JAVARUBY8
			cd -
		fi
	else
		# check if the preinstalled java version is the right one
		INSTALLED_VERSION=$(cat /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Info.plist | grep "AdoptOpenJDK 1.8" | head -n 1 | cut -c 23-31)
		if [ ! "$INSTALLED_VERSION" = "1.8.0_232" ]; then
			echo " * Replacing existing java 8 installation with compatible version 1.8.0_232"
			if [ -z "$PRETEND" ] ; then
			    brew uninstall --cask adoptopenjdk8
			    brew install --cask $JAVARUBY8
			fi
		else
			echo " * Skipping installation/update of Java 1.8.0_232"
		fi
	fi
}

# makes sure the core/ram code is where it is supposed to be
function checkoutcode
{
	# Ensure existence of Code basedir
	if [ ! -d ~/Code/ ]; then
		echo " * Creating dedicated Code folder"
		if [ -z "$PRETEND" ] ; then
		  mkdir ~/Code
		fi
	else
		echo " * Skipping creation of ~/Code folder"
	fi
        if [ -z "$PRETEND" ] ; then
       	  cd ~/Code
	fi

	# Ensure the repositories are present
	if [ ! -d ~/Code/touchram ]; then
		echo " * Cloning touchram sources into Code folder"
		if [ -z "$PRETEND" ] ; then
		  git clone https://bitbucket.org/mcgillram/touchram.git
		fi
	else
		echo " * Skipping checkout of core sources"
	fi
	if [ ! -d ~/Code/core ]; then
		echo " * Cloning core sources into Code folder"
		if [ -z "$PRETEND" ] ; then
		  git clone https://bitbucket.org/mcgillram/core.git
		fi
	else
		echo " * Skipping checkout of touchram sources"
	fi
}

# makes sure that version 4.13.0 of the eclipse mdoeling version is installed
function eclipseinstall
{
	# check if the modeling verison of eclipse is installed
	cd $BASEPATH
	if [ ! -d /Applications/Eclipse\ Modeling.app/ ]; then
		echo " * Installing Eclipse Modeling version to /Applications/Eclipse Modeling.app/"
		if [ -z "$PRETEND" ] ; then
		    # check if existing version was installed by brew
		    brew info --cask eclipse-modeling &> /dev/null
		    if [ $? -eq 0 ] ; then
    		      brew uninstall --cask eclipse-modeling &> /dev/null
		    else
 		      rm -rf /Applications/Eclipse-Modeling.app/
                    fi
		    brew install --cask ./eclipse-modeling.rb
		fi
	else
		
		# check if the installed version is the right one
		INSTALLEDECLIPSE=$(cat /Applications/Eclipse\ Modeling.app/Contents/Info.plist | grep -A2 CFBundleVersion | grep string | cut -c 13-33)
		if [ ! "$INSTALLEDECLIPSE" = "$ECLIPSE_TARGET_ID" ]; then
		  echo " * Replacing installed eclipse by $ECLIPSEVERSION"
		  if [ -z "$PRETEND" ] ; then
		    # check if existing version was installed by brew
		    brew info --cask eclipse-modeling > /dev/null
		    BREWINSTALLED=$?
		    if [ $BREWINSTALLED -eq 0 ] ; then
    		      brew reinstall ./eclipse-modeling.rb
		    else
 		      rm -rf /Applications/Eclipse-Modeling.app/
		      brew install --cask ./eclipse-modeling.rb
                    fi
		  fi
		else
		  echo " * Skipping installation/update of Eclipse-Modeling"
		fi
	fi
}

# TODO: make sure the _right versions_ of the plugins are installed
# Uninstall with: -uninstallIU
function eclipseplugins()
{
    # acceleo
    if ls /Applications/Eclipse\ Modeling.app/Contents/Eclipse/plugins/org.eclipse.acceleo.common_$ACCELEOVERSION.jar 1> /dev/null 2>&1; then
	echo " * Skipping installation of Acceleo Eclipse-Plugin"
    else
	    echo " * Installing Acceleo Eclipse-Plugin"
	    if [ -z "$PRETEND" ] ; then
	      /Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository http://download.eclipse.org/releases/$ECLIPSEVERSION -installIU org.eclipse.acceleo.feature.group/$ACCELEOVERSION
	    fi
    fi

    # OCL
    if ls /Applications/Eclipse\ Modeling.app/Contents/Eclipse/plugins/org.eclipse.ocl.examples_*$OCLVERSION*.jar 1> /dev/null 2>&1; then
	echo " * Skipping installation of OCL Eclipse-Plugin"
    else
	    echo " * Installing OCL Eclipse-Plugin"
	    if [ -z "$PRETEND" ] ; then
	      /Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository http://download.eclipse.org/releases/$ECLIPSEVERSION -installIU org.eclipse.ocl.examples.feature.group/$OCLVERSIONPREFIX$OCLVERSION
	    fi
    fi

    # xtext
    if ls /Applications/Eclipse\ Modeling.app/Contents/Eclipse/plugins/org.eclipse.xtext.doc_$XTEXTVERSION*.jar 1> /dev/null 2>&1; then
	echo " * Skipping installation of Xtext Eclipse-Plugin"
    else
	    echo " * Installing Xtext Eclipse-Plugin"
	    if [ -z "$PRETEND" ] ; then
      /Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository http://download.eclipse.org/releases/$ECLIPSEVERSION -installIU org.eclipse.xtext.sdk.feature.group/$XTEXTVERSION$XTEXTVERSIONSUFFIX
	    fi
    fi

    # CDT 
    if ls /Applications/Eclipse\ Modeling.app/Contents/Eclipse/plugins/org.eclipse.cdt_$CDTVERSIONPREFIX*.jar 1> /dev/null 2>&1; then
	echo " * Skipping installation of CDT Eclipse-Plugin"
    else
	    echo " * Installing CDT Eclipse-Plugin"
	    if [ -z "$PRETEND" ] ; then
	      /Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository http://download.eclipse.org/releases/$ECLIPSEVERSION -installIU org.eclipse.cdt.feature.group/$CDTVERSIONPREFIX$CDTVERSION
	    fi
    fi

## Seems like EGIT is not required any more
    # EGIT
#    if ls /Applications/Eclipse\ Modeling.app/Contents/Eclipse/plugins/org.eclipse.egitmylyn.ui_$EGITVERSION*.jar 1> /dev/null 2>&1; then
#	echo " * Skipping installation of EGIT Eclipse-Plugin"
#    else
#	    echo " * Installing EGIT Eclipse-Plugin and dependencies"
#	    if [ -z "$PRETEND" ] ; then
#		# Mylyn team support
#		/Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository http://download.eclipse.org/releases/$ECLIPSEVERSION -installIU org.eclipse.mylyn.team_feature.feature.group/$MYLYNVERSION
#		# Egit core
#		/Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository $EGITREPO -installIU org.eclipse.egit.source.feature.group/$EGITVERSION
#		# Egit features
#		/Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository $EGITREPO -installIU org.eclipse.egit.gitflow.feature.feature.group/$EGITVERSION
#		# Egit team support
#		/Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository $EGITREPO -installIU org.eclipse.egit.mylyn.feature.group/$EGITVERSION
#	    fi
#    fi


    ## Epsilon
    if ls /Applications/Eclipse\ Modeling.app/Contents/Eclipse/plugins/org.eclipse.epsilon.emc.emf_$EPSILONVERSIONPREFIX$EPSILONVERSION.jar 1> /dev/null 2>&1; then
	echo " * Skipping installation of Epsilon Eclipse-Plugin"
    else
	    echo " * Installing Epsilon Eclipse-Plugin and dependencies"
	    if [ -z "$PRETEND" ] ; then
		# Cross dependency of epsilon - not auto respoved since not in standard repo.
		/Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository $ORBITREPO -installIU org.apache.commons.math3/$MATH3VERSION
		# Epsilon Core Dev
		/Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository $EPSILONREPO -installIU org.eclipse.epsilon.core.dt.feature.feature.group/$EPSILONVERSIONPREFIX$EPSILONVERSION
		# EMF Integration
		/Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -application org.eclipse.equinox.p2.director -repository $EPSILONREPO -installIU org.eclipse.epsilon.emf.feature.feature.group/$EPSILONVERSIONPREFIX$EPSILONVERSION
	    fi
    fi

}

function eclipseconfig()
{
    # disable mac-os integrity / signature checks, so we can still launch the app after we configured it.
    if [ -z "$PRETEND" ] ; then
      spctlcheck
    fi

    # make sure the right eclipse workspace exists
    if [ ! -d ~/touchcore-workspace/ ]; then
      echo " * Creating dedicated workspace"
      if [ -z "$PRETEND" ] ; then
        mkdir ~/touchcore-workspace
      fi
    else
      echo " * Skipping creation of dedicated workspace"
    fi

    # make sure dedicated workspace is selected by default
    if [ ! -f /Applications/Eclipse\ Modeling.app/Contents/Eclipse/configuration/.settings/org.eclipse.ui.ide.prefs ] ; then
      echo " * Setting correct default workspace"
      if [ -z "$PRETEND" ] ; then
        mkdir -p /Applications/Eclipse\ Modeling.app/Contents/Eclipse/configuration/.settings
	echo "MAX_RECENT_WORKSPACES=10
RECENT_WORKSPACES=/Users/$(whoami)/touchcore-workspace
RECENT_WORKSPACES_PROTOCOL=3
SHOW_RECENT_WORKSPACES=false
SHOW_WORKSPACE_SELECTION_DIALOG=false
eclipse.preferences.version=1" > /Applications/Eclipse\ Modeling.app/Contents/Eclipse/configuration/.settings/org.eclipse.ui.ide.prefs
      fi
    else
      echo " * Skipping setting dedicated workspace as default"
    fi

    # make sure the correct JRE path is set
    echo " * Configuring Eclipse to use JRE 11 as default"
    if [ -z "$PRETEND" ] ; then
      mkdir -p ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/
      echo 'eclipse.preferences.version=1
org.eclipse.jdt.launching.PREF_VM_XML=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?>\n<vmSettings defaultVM\="52,org.eclipse.jdt.internal.launching.macosx.MacOSXType22,net.adoptopenjdk.11.jre">\n    <vmType id\="org.eclipse.jdt.internal.launching.macosx.MacOSXType">\n        <vm id\="net.adoptopenjdk.13.jdk" name\="AdoptOpenJDK 13 [13.0.2]" path\="/Library/Java/JavaVirtualMachines/adoptopenjdk-13.jdk/Contents/Home"/>\n        <vm id\="net.adoptopenjdk.11.jdk" name\="AdoptOpenJDK 11 [11.0.5]" path\="/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home"/>\n        <vm id\="net.adoptopenjdk.11.jre" name\="AdoptOpenJDK (JRE) 11 [11.0.5]" path\="/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home"/>\n    </vmType>\n</vmSettings>\n' > ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.jdt.launching.prefs
    fi

    # make sure the correct compiler compliance is set
    echo " * Configuring Eclipse compiler compliance JDK 11"
    if [ -z "$PRETEND" ] ; then
      echo "org.eclipse.jdt.core.compiler.compliance=11" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.jdt.core.prefs
      echo "org.eclipse.jdt.core.compiler.source=11" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.jdt.core.prefs
      echo "org.eclipse.jdt.core.compiler.codegen.targetPlatform=11" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.jdt.core.prefs
    fi

    # disable the dark theme, for it does not work together well with sirius
    echo " * Configuring Eclipse to just display things as they are"
    if [ -z "$PRETEND" ] ; then
      echo "eclipse.preferences.version=1" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.e4.ui.css.swt.theme.prefs
      echo "themeid=org.eclipse.e4.ui.css.theme.e4_classic" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.e4.ui.css.swt.theme.prefs
      echo "eclipse.preferences.version=1" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.e4.ui.workbench.renderers.swt.prefs
      echo "enableMRU=true" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.e4.ui.workbench.renderers.swt.prefs
      # themes should be enabled, but set to default
#      echo "themeEnabled=false" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.e4.ui.workbench.renderers.swt.prefs
      echo "content_assist_proposals_background=255,255,255" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.jdt.ui.prefs
      echo "content_assist_proposals_foreground=0,0,0" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.jdt.ui.prefs
#      echo "CURRENT_THEME_ID=org.eclipse.ui.r30" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.ui.prefs
    fi

    # override default indent policy (configure to replace tabs by 4 whitespaces)
    echo " * Configuring 4-whitespace as custom indent policy on auto-format"
    if [ -z "$PRETEND" ] ; then
      cp org.eclipse.jdt.ui.prefs ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.jdt.ui.prefs
    fi

    # disable anoying popups
    echo " * Configuring Eclipse to respect my will and stop asking redundant questions"
    if [ -z "$PRETEND" ] ; then
      echo "EXIT_PROMPT_ON_CLOSE_LAST_WINDOW=false" >> ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.ui.ide.prefs
    fi
}

# checkstyle is a marketplace app and as such not directly installable via the eclipse installer. But there it is possible to just download the extension's files and extract them at the right place, into the existing ecplise installation
function eclipsecs()
{	
	# TODO: Uninstall different versions.
	if [ ! -f /Applications/Eclipse\ Modeling.app/Contents/Eclipse/plugins/net.sf.eclipsecs.checkstyle_9.1.0.202201281540.jar ]; then
		echo " * Installing Checkstyle plugin"
		
		if [ -z "$PRETEND" ] ; then
			# not from official repo. Bash installer therefore rejects the plugin. But we can transplant the content manually into the eclipse installation.
			wgetinstall

			# get the checkstyle plugin, v 8.29.0.202001290016
                        # if you need to update the link, see logfile instructions for checkstyle build (maven)
			wget -q --show-progress --progress=bar:force -O /tmp/checkstyle.zip https://www.cs.mcgill.ca/~mschie3/auto-install-res/checkstyle.zip
			unzip -qq -o /tmp/checkstyle.zip -d /tmp

			# transplant plugin files into Eclipse installation
			cp /tmp/features/* /Applications/Eclipse\ Modeling.app/Contents/Eclipse/features/
			cp /tmp/plugins/* /Applications/Eclipse\ Modeling.app/Contents/Eclipse/plugins/
		fi
	else
		echo " * Skipping installation of Checkstyle-Plugin"
	fi
}

# forces the right checkstyle configuration file to be used, without any clicking
function configurecs()
{
	if [ ! -f ~/touchcore-workspace/.metadata/.plugins/net.sf.eclipsecs.core/checkstyle-config.xml ]; then
		echo " * Auto configuring checkstyle plugin"
		if [ -z "$PRETEND" ] ; then
			mkdir -p ~/touchcore-workspace/.metadata/.plugins/net.sf.eclipsecs.core/
			echo '<?xml version="1.0" encoding="UTF-8"?>

		<checkstyle-configurations file-format-version="5.0.0" default-check-configuration="TouchRAM Checks">
		  <check-configuration name="TouchRAM Checks" location="/ca.mcgill.sel.commons/touchram_checkstyle.xml" type="project" description="">
		    <additional-data name="protect-config-file" value="false"/>
		  </check-configuration>
		</checkstyle-configurations>' > ~/touchcore-workspace/.metadata/.plugins/net.sf.eclipsecs.core/checkstyle-config.xml
		fi
	else
		echo " * Skipping configuration of checkstyle plugin."
	fi
}

# Requires eclipse CDT sdk plugin to work
function projectimport()
{
	# run check if already imported.
	if [ ! -f ~/touchcore-workspace/.metadata/.plugins/org.eclipse.core.resources/.projects/ca.mcgill.sel.ram.gui/.location ]; then
		echo " * Importing projects into workspace"
		if [ -z "$PRETEND" ] ; then
			## CORE projects
			for i in ~/Code/core/ca.mcgill*
			  do 
			  # skip the perspective design project - it is a phantom
			  if [[ "$i" == *"$ca.mcgill.sel.core.perspective.design"* ]]; then
				continue;
			  fi
			  # skip the gui project - it is a phantom
			  if [[ "$i" == *"$ca.mcgill.sel.core.gui"* ]]; then
				continue;
			  fi
			  # skip the gui perspective.dsl project - it is a phantom
			  if [[ "$i" == *"$ca.mcgill.sel.core.perspective.dsl"* ]]; then
				continue;
			  fi
			  # skip all editors
			  if [[ "$i" == *"editor"* ]]; then
				continue;
			  fi
			  # TODO: skip import if already imported
			  /Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -data ~/touchcore-workspace/ -application org.eclipse.cdt.managedbuilder.core.headlessbuild -import $i &>/dev/null
			  echo -n "."
			done
			## RAM projects
			for i in ~/Code/touchram/ca.mcgill*
			  do 
			  # skip all editors
			  if [[ "$i" == *"editor"* ]]; then
				continue;
			  fi

			  # skip the ram languages (legacy)
                          if [[ "$i" == *"$ca.mcgill.sel.ram.languages"* ]]; then
                                continue;
                          fi
			  # skip the pcm projects (currently not building)
			  if [[ "$i" == *"$ca.mcgill.sel.pcm"* ]]; then
				continue;
			  fi
			  # skip the ucm projects (currently not building)
			  if [[ "$i" == *"$ca.mcgill.sel.ucm"* ]]; then
				continue;
			  fi
			  # skip the ram editor project - it is a phantom
			  if [[ "$i" == *"$ca.mcgill.sel.ram.editor"* ]]; then
			  	continue;
			  fi
			  # skip all usecasediagram projects - are phantoms
			  if [[ "$i" == *"$ca.mcgill.sel.usecasediagram"* ]]; then
			  	continue;
			  fi
			  if [[ "$i" == *"$ca.mcgill.sel.usecasediagram.controller"* ]]; then
			  	continue;
			  fi
			  if [[ "$i" == *"$ca.mcgill.sel.usecasediagram.edit"* ]]; then
			  	continue;
			  fi
			  # skip design perspective - is a phantom
			  if [[ "$i" == *"$ca.mcgill.sel.core.perspective.design"* ]]; then
			  	continue;
			  fi

			  /Applications/Eclipse\ Modeling.app/Contents/MacOS/eclipse -nosplash -data ~/touchcore-workspace/ -application org.eclipse.cdt.managedbuilder.core.headlessbuild -import $i &>/dev/null
			  echo -n "."
			done
			echo ""
		fi
		echo "[Project import complete. To link git upstream, select all modules - rightclick -> team -> share]"
	else
		echo " * Skipping import of projects into workspace"
	fi
}

function configurelauncher()
{
	# run check if already configured
	if [ ! -f ~/touchcore-workspace/.metadata/.plugins/org.eclipse.debug.ui/launchConfigurationHistory.xml ]; then
		echo " * Preparing TouchCORE run configuration"
		if [ -z "$PRETEND" ] ; then
			# Copy prepared touchcore launcher into workspace
			mkdir -p ~/touchcore-workspace/.metadata/.plugins/org.eclipse.debug.core/.launches/
			cp TouchCORE.launch ~/touchcore-workspace/.metadata/.plugins/org.eclipse.debug.core/.launches/

			# Set TouchCORE launcher as primary history entry.
			mkdir -p ~/touchcore-workspace/.metadata/.plugins/org.eclipse.debug.ui/
			cp launchConfigurationHistory.xml ~/touchcore-workspace/.metadata/.plugins/org.eclipse.debug.ui/
		fi
	fi
}

# get rid of those annoying popups on first eclipse start. At least the checkbox, if not the tab.
function popupdismiss()
{
	echo " * Chasing away those annoying pop-ups"

	if [ -z "$PRETEND" ] ; then
		mkdir -p ~/touchcore-workspace/.metadata/.plugins/org.eclipse.ui.intro/
		cp introstate ~/touchcore-workspace/.metadata/.plugins/org.eclipse.ui.intro/
	fi
}

function autoinstaller()
{
	brewinstall
	javainstall8
#	javainstall11
	checkoutcode
	eclipseinstall
	eclipseplugins

	# install eclipse checkstyle plugin
	eclipsecs

	# configure general eclipse settings
	eclipseconfig
	
	# configure eclipse checkstyle plugin
	configurecs
	configurelauncher
	popupdismiss
	projectimport
}

# deletes all eclipse artefacts that reside in user homedir
function deleteUserConfigs()
{
	echo " * Deleting all existing installation artifacts / configurations in homedir."
	
	# delete eclipse settings
	echo "   * Deleting eclipse cache"
        if [ -z "$PRETEND" ] ; then
	  if [ -d ~/.eclipse ] ; then
		rm -rf ~/.eclipse
	  fi
        fi

	# delete custom workspace
	echo "   * Deleting workspace"
        if [ -z "$PRETEND" ] ; then
	  if [ -d ~/touchcore-workspace ] ; then
		rm -rf ~/touchcore-workspace
	  fi
        fi

}

# deletes the cehcked out code
function deleteCode()
{
	cd
	echo "   * Deleting checked out Code"
        if [ -z "$PRETEND" ] ; then
	  if [ -d ~/Code/touchram ]; then
		rm -rf Code/touchram
	  fi
	  if [ -d ~/Code/core ]; then
		rm -rf ~/Code/core
	  fi
        fi
}

# deletes the eclipse base iantallation in the applications folder
function deleteEclipse
{
	echo "   * Deleting Eclipse installation"
        if [ -z "$PRETEND" ] ; then
	  if [ -d /Applications/Eclipse\ Modeling.app/ ]; then
		rm -rf /Applications/Eclipse\ Modeling.app
	  fi
        fi
}


# deletes any artifacts of a previous setup, if found on disk
function deleteEverything()
{
	echo " * Deleting all system wide installation artifacts / configurations / code."

	# delete checked out code
	deleteCode;

	# delete eclipse installation
	deleteEclipse

	# also delete local configs
	deleteUserConfigs;
}

function usage()
{
echo "TouchCORE Auto Dev Setup"
echo "------------------------"
echo "SYNOPSIS"
echo "    touchcore-init [-h | -p | -r | -nqa]"
echo "OPTIONS (flags can not be combined)"
echo "    -h | --help"
echo "      Print this help message."
echo "    -p | --pretend"
echo "      Only show what would be done, without actually modifying anything."
echo "    -r | --repair"
echo "      Repair eclipse. Does not touch the plugins or code but resets all eclipse caches by resetting the workspace and .eclipse folder."
echo "    -nqa | --noquestionsasked"
echo "      Erase anything that might conflict a clean installation and reinstall, without any further user interactions."
echo "    -c | --clean"
echo "      Remove all conflicting installation artifacts before running the installation."
}


# MAIN FUNCTION

# reject script execution on non-macos systems
maccheck

# reject script exection if caller has no admin priviledges
admincheck

## parse command line arguments:

# No questions asked flag. If set to true, the script will brutally remove everything that potentially is in the way and perform a full isntallation, without any questions asked. Overrides all other command line options.
NQA=

# Confirm flag - the user has to confirm that she made a backup, before any change is made to the disk
CONFIRMED=

# Dummy mode flag. The script outputs verbose of all steps that would be executed without actually modifying the system.
PRETEND=

# Clean flag. If set ALL existing installation artifacts will be removed.
CLEAN=

# Repair flag. If set all local eclipse configuration artifacts will be restored
REPAIR=

while [ "$1" != "" ]; do
    case $1 in
        -nqa | --noquestionsasked )           shift
                                NQA=1
                                ;;
        -p | --pretend )        shift
                                PRETEND=1
                                ;;
        -r | --repair )         shift
                                REPAIR=1
                                ;;
        -c | --clean )           shift
                                CLEAN=1
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

# actually perform installation, based on pased arguments
# special case "nqa": ignore all other options, erase everything and reinstall from scratch
if [ ! -z "$NQA" ]; then
        echo "No questions asked..."
	CORRECT="y"
	deleteEverything;
	autoinstaller;
	exit;
fi

# the standard installer:
if [ ! -z "$PRETEND" ]; then
	echo "You are in pretend mode. All checks are run, but no modifications are made to your system."
	PRETEND="y"
else
	disclaimer
fi

# Repair / Reset an existing installation
if [ "$CORRECT" = "y" ] || [ ! -z "$PRETEND" ] || [ ! -z "$REPAIR" ] ; then
        if [ ! -z "$REPAIR" ]; then
          deleteUserConfigs;
        fi
        if [ ! -z "$CLEAN" ]; then
          deleteEclipse;
	  deleteUserConfigs
        fi
        autoinstaller
else
	echo "No changes made. Exiting."	
	exit 1
fi

exit -1
